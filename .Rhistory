set.train <- subgroup.yesdegr[which(folds!=i),]
set.test <- subgroup.yesdegr[which(folds==i),]
lm.yesdegr.kfold <- lm(re78 ~ educ + black + treat, data=set.train)
predict.kfold <- predict(lm.yesdegr.kfold, set.test)
SE.kfold = (sum((predict.kfold-set.test$re78)^2)/length(set.test))**(1/2)
if (SE.kfold < min.SE.kfold)
{
min.SE.kfold = SE.kfold
min.lm.yesdegr.kfold = lm.yesdegr.kfold
}
}
summary(min.lm.yesdegr.kfold)
confint(min.lm.yesdegr.kfold, level=0.95)
k <- 30
folds <- kfold(subgroup.yesdegr, k)
min.SE.kfold <- Inf
for (i in 1:k)
{
set.train <- subgroup.yesdegr[which(folds!=i),]
set.test <- subgroup.yesdegr[which(folds==i),]
lm.yesdegr.kfold <- lm(re78 ~ educ + black + treat, data=set.train)
predict.kfold <- predict(lm.yesdegr.kfold, set.test)
SE.kfold = (sum((predict.kfold-set.test$re78)^2)/length(set.test))**(1/2)
if (SE.kfold < min.SE.kfold)
{
min.SE.kfold = SE.kfold
min.lm.yesdegr.kfold = lm.yesdegr.kfold
}
}
summary(min.lm.yesdegr.kfold)
confint(min.lm.yesdegr.kfold, level=0.95)
k <- 97
folds <- kfold(subgroup.yesdegr, k)
min.SE.kfold <- Inf
for (i in 1:k)
{
set.train <- subgroup.yesdegr[which(folds!=i),]
set.test <- subgroup.yesdegr[which(folds==i),]
lm.yesdegr.kfold <- lm(re78 ~ educ + black + treat, data=set.train)
predict.kfold <- predict(lm.yesdegr.kfold, set.test)
SE.kfold = (sum((predict.kfold-set.test$re78)^2)/length(set.test))**(1/2)
if (SE.kfold < min.SE.kfold)
{
min.SE.kfold = SE.kfold
min.lm.yesdegr.kfold = lm.yesdegr.kfold
}
}
summary(min.lm.yesdegr.kfold)
confint(min.lm.yesdegr.kfold, level=0.95)
k <- 97
folds <- kfold(subgroup.yesdegr, k)
min.SE.kfold <- Inf
for (i in 1:k)
{
set.train <- subgroup.yesdegr[which(folds!=i),]
set.test <- subgroup.yesdegr[which(folds==i),]
lm.yesdegr.kfold <- lm(re78 ~ educ + black + treat, data=set.train)
predict.kfold <- predict(lm.yesdegr.kfold, set.test)
SE.kfold = (sum((predict.kfold-set.test$re78)^2)/length(set.test))**(1/2)
if (SE.kfold < min.SE.kfold)
{
min.SE.kfold = SE.kfold
min.lm.yesdegr.kfold = lm.yesdegr.kfold
}
}
summary(min.lm.yesdegr.kfold)
confint(min.lm.yesdegr.kfold, level=0.95)
k <- 97
folds <- kfold(subgroup.yesdegr, k)
min.SE.kfold <- Inf
for (i in 1:k)
{
set.train <- subgroup.yesdegr[which(folds!=i),]
set.test <- subgroup.yesdegr[which(folds==i),]
lm.yesdegr.kfold <- lm(re78 ~ educ + black + treat, data=set.train)
predict.kfold <- predict(lm.yesdegr.kfold, set.test)
SE.kfold = (sum((predict.kfold-set.test$re78)^2)/length(set.test))**(1/2)
if (SE.kfold < min.SE.kfold)
{
min.SE.kfold = SE.kfold
min.lm.yesdegr.kfold = lm.yesdegr.kfold
}
}
summary(min.lm.yesdegr.kfold)
confint(min.lm.yesdegr.kfold, level=0.95)
lm.nodegr.1 <- lm(re78 ~ educ + black + treat, data=subgroup.nodegr)
summary(lm.nodegr.1)
confint(lm.nodegr.1, level=0.95)
lm.yesdegr.1 <- lm(re78 ~ educ + black + treat, data=subgroup.yesdegr)
summary(lm.yesdegr.1)
confint(lm.yesdegr.1, level=0.95)
k <- 10
folds <- kfold(subgroup.yesdegr, k)
min.SE.kfold <- Inf
for (i in 1:k)
{
set.train <- subgroup.yesdegr[which(folds!=i),]
set.test <- subgroup.yesdegr[which(folds==i),]
lm.yesdegr.kfold <- lm(re78 ~ educ + black + treat, data=set.train)
predict.kfold <- predict(lm.yesdegr.kfold, set.test)
SE.kfold = (sum((predict.kfold-set.test$re78)^2)/length(set.test))**(1/2)
if (SE.kfold < min.SE.kfold)
{
min.SE.kfold = SE.kfold
min.lm.yesdegr.kfold = lm.yesdegr.kfold
}
}
summary(min.lm.yesdegr.kfold)
confint(min.lm.yesdegr.kfold, level=0.95)
k <- nrow(subgroup.yesdegr)
folds <- kfold(subgroup.yesdegr, k)
min.SE.kfold <- Inf
for (i in 1:k)
{
set.train <- subgroup.yesdegr[which(folds!=i),]
set.test <- subgroup.yesdegr[which(folds==i),]
lm.yesdegr.kfold <- lm(re78 ~ educ + black + treat, data=set.train)
predict.kfold <- predict(lm.yesdegr.kfold, set.test)
SE.kfold = (sum((predict.kfold-set.test$re78)^2)/length(set.test))**(1/2)
if (SE.kfold < min.SE.kfold)
{
min.SE.kfold = SE.kfold
min.lm.yesdegr.kfold = lm.yesdegr.kfold
}
}
summary(min.lm.yesdegr.kfold)
confint(min.lm.yesdegr.kfold, level=0.95)
glm.nodegr <- glm(u78 ~ age + educ + black + hisp + married + re74 + re75 + u74 + u75 + treat, data=subgroup.nodegr, family=binomial)
lm.2 <- lm(re78 ~ I(treat*nodegr), data=lalonde)
summary(lm.2)
lm.3 <- lm(re78 ~ treat + nodegr + I(treat*nodegr), data=lalonde)
summary(lm.3)
confint(lm.3, level=0.95)
lm.3.sim <- sim (lm.3)
coef(lm.3.sim)
plot (NA, NA, xlim=c(0, 1), ylim=c(-2000,6000),
xlab="nodegr", ylab="treatment effect",
main="lalonde program treatment effect")
abline (h = 0, lwd=.5, lty=2)
for (i in 1:100) {
abline (a = coef(lm.3.sim)[i,2], b = coef(lm.3.sim)[i,4],
lwd = .5, col = "gray")
}
abline (a = lm.3$coefficients[2], b = lm.3$coefficients[4],
lwd = 1, col = "black")
lalonde$u78 = 1*(lalonde$re78 == 0)   # define u78 = 1 for those earned 0 income in 1978
subgroup.nodegr = subset(lalonde, nodegr == 1)
subgroup.yesdegr = subset(lalonde, nodegr == 0)   # update the subsets to include u78
glm.nodegr <- glm(u78 ~ age + educ + black + hisp + married + re74 + re75 + u74 + u75 + treat, data=subgroup.nodegr, family=binomial)
summary(glm.nodegr)
confint(glm.nodegr, level=0.95)
glm.yesdegr <- glm(u78 ~ age + educ + black + hisp + married + re74 + re75 + u74 + u75 + treat, data=subgroup.yesdegr, family=binomial)
summary(glm.yesdegr)
confint(glm.yesdegr, level=0.95)
library(Matching)
library(arm)
library(dismo)
data(lalonde)
subgroup.nodegr <- subset(lalonde, nodegr == 1)
subgroup.yesdegr <- subset(lalonde, nodegr == 0)
lm.1 <- lm(re78 ~ age + educ + black + hisp + married + nodegr + re74 + re75 + u74 + u75 + treat, data=lalonde)
summary(lm.1)
lm.2 <- lm(re78 ~ educ + black + treat, data=lalonde)
summary(lm.2)
lm.nodegr.1 <- lm(re78 ~ educ + black + treat, data=subgroup.nodegr)
summary(lm.nodegr.1)
confint(lm.nodegr.1, level=0.95)
lm.yesdegr.1 <- lm(re78 ~ educ + black + treat, data=subgroup.yesdegr)
summary(lm.yesdegr.1)
confint(lm.yesdegr.1, level=0.95)
k <- 10
folds <- kfold(subgroup.yesdegr, k)
min.SE.kfold <- Inf
for (i in 1:k)
{
set.train <- subgroup.yesdegr[which(folds!=i),]
set.test <- subgroup.yesdegr[which(folds==i),]
lm.yesdegr.kfold <- lm(re78 ~ educ + black + treat, data=set.train)
predict.kfold <- predict(lm.yesdegr.kfold, set.test)
SE.kfold = (sum((predict.kfold-set.test$re78)^2)/length(set.test))**(1/2)
if (SE.kfold < min.SE.kfold)
{
min.SE.kfold = SE.kfold
min.lm.yesdegr.kfold = lm.yesdegr.kfold
}
}
summary(min.lm.yesdegr.kfold)
confint(min.lm.yesdegr.kfold, level=0.95)
k <- nrow(subgroup.yesdegr)
folds <- kfold(subgroup.yesdegr, k)
min.SE.kfold <- Inf
for (i in 1:k)
{
set.train <- subgroup.yesdegr[which(folds!=i),]
set.test <- subgroup.yesdegr[which(folds==i),]
lm.yesdegr.kfold <- lm(re78 ~ educ + black + treat, data=set.train)
predict.kfold <- predict(lm.yesdegr.kfold, set.test)
SE.kfold = (sum((predict.kfold-set.test$re78)^2)/length(set.test))**(1/2)
if (SE.kfold < min.SE.kfold)
{
min.SE.kfold = SE.kfold
min.lm.yesdegr.kfold = lm.yesdegr.kfold
}
}
summary(min.lm.yesdegr.kfold)
confint(min.lm.yesdegr.kfold, level=0.95)
lm.2 <- lm(re78 ~ I(treat*nodegr), data=lalonde)
summary(lm.2)
lm.3 <- lm(re78 ~ treat + nodegr + I(treat*nodegr), data=lalonde)
summary(lm.3)
confint(lm.3, level=0.95)
lm.3.sim <- sim (lm.3)
coef(lm.3.sim)
plot (NA, NA, xlim=c(0, 1), ylim=c(-2000,6000),
xlab="nodegr", ylab="treatment effect",
main="lalonde program treatment effect")
abline (h = 0, lwd=.5, lty=2)
for (i in 1:100) {
abline (a = coef(lm.3.sim)[i,2], b = coef(lm.3.sim)[i,4],
lwd = .5, col = "gray")
}
abline (a = lm.3$coefficients[2], b = lm.3$coefficients[4],
lwd = 1, col = "black")
lalonde$u78 = 1*(lalonde$re78 == 0)   # define u78 = 1 for those earned 0 income in 1978
subgroup.nodegr = subset(lalonde, nodegr == 1)
subgroup.yesdegr = subset(lalonde, nodegr == 0)   # update the subsets to include u78
glm.nodegr <- glm(u78 ~ age + educ + black + hisp + married + re74 + re75 + u74 + u75 + treat, data=subgroup.nodegr, family=binomial)
summary(glm.nodegr)
confint(glm.nodegr, level=0.95)
glm.yesdegr <- glm(u78 ~ age + educ + black + hisp + married + re74 + re75 + u74 + u75 + treat, data=subgroup.yesdegr, family=binomial)
summary(glm.yesdegr)
confint(glm.yesdegr, level=0.95)
mean(subset(glm.nodegr$fitted.values, subgroup.nodegr$treat=0))
mean(subset(glm.nodegr$fitted.values, subgroup.nodegr$treat == 0))
mean(subset(glm.nodegr$fitted.values, subgroup.nodegr$treat == 0))
mean(subset(subgroup.nodegr$u78, subgroup.nodegr$treat == 0))
glm.nodegr
mean(subset(glm.nodegr$fitted.values)
)
mean(glm.nodegr$fitted.values)
u78.mean.nodegr.glm <- mean(subset(glm.nodegr$fitted.values, subgroup.nodegr$treat == 0))
u78.mean.yesdegr.glm <- mean(subset(glm.yesdegr$fitted.values, subgroup.yesdegr$treat == 0))
mean(subset(glm.yesdegr$fitted.values, subgroup.yesdegr$treat == 0))
mean(subset(subgroup.nodegr$u78, subgroup.nodegr$treat == 0))
u78.mean.nodegr.notreat.glm <- mean(subset(glm.nodegr$fitted.values, subgroup.nodegr$treat == 0))
u78.mean.nodegr.yestreat.glm <- mean(subset(glm.nodegr$fitted.values, subgroup.nodegr$treat == 1))
u78.nodegr.treateffect.glm <- u78.mean.nodegr.yestreat.glm - u78.mean.nodegr.notreat.glm
display(u78.nodegr.treateffect.glm)
u78.mean.nodegr.notreat.glm <- mean(subset(glm.nodegr$fitted.values, subgroup.nodegr$treat == 0))
u78.mean.nodegr.yestreat.glm <- mean(subset(glm.nodegr$fitted.values, subgroup.nodegr$treat == 1))
u78.nodegr.treateffect.glm <- u78.mean.nodegr.yestreat.glm - u78.mean.nodegr.notreat.glm
summery(u78.nodegr.treateffect.glm)
u78.mean.nodegr.notreat.glm <- mean(subset(glm.nodegr$fitted.values, subgroup.nodegr$treat == 0))
u78.mean.nodegr.yestreat.glm <- mean(subset(glm.nodegr$fitted.values, subgroup.nodegr$treat == 1))
u78.nodegr.treateffect.glm <- u78.mean.nodegr.yestreat.glm - u78.mean.nodegr.notreat.glm
u78.nodegr.treateffect.glm
u78.mean.nodegr.notreat.glm <- mean(subset(glm.nodegr$fitted.values, subgroup.nodegr$treat == 0))
u78.mean.nodegr.yestreat.glm <- mean(subset(glm.nodegr$fitted.values, subgroup.nodegr$treat == 1))
u78.nodegr.treateffect.glm <- u78.mean.nodegr.yestreat.glm - u78.mean.nodegr.notreat.glm
u78.nodegr.treateffect.glm
u78.mean.yesdegr.notreat.glm <- mean(subset(glm.yesdegr$fitted.values, subgroup.yesdegr$treat == 0))
u78.mean.yesdegr.yestreat.glm <- mean(subset(glm.yesdegr$fitted.values, subgroup.yesdegr$treat == 1))
u78.yesdegr.treateffect.glm <- u78.mean.yesdegr.yestreat.glm - u78.mean.yesdegr.notreat.glm
u78.yesdegr.treateffect.glm
u78.mean.nodegr.notreat <- mean(subset(subgroup.nodegr$u78, subgroup.nodegr$treat == 0))
u78.mean.nodegr.yestreat <- mean(subset(subgroup.nodegr$u78, subgroup.nodegr$treat == 1))
u78.nodegr.treateffect <- u78.mean.nodegr.yestreat - u78.mean.nodegr.notreat
u78.nodegr.treateffect
u78.mean.yesdegr.notreat <- mean(subset(subgroup.yesdegr$u78, subgroup.yesdegr$treat == 0))
u78.mean.yesdegr.yestreat <- mean(subset(subgroup.yesdegr$u78, subgroup.yesdegr$treat == 1))
u78.yesdegr.treateffect <- u78.mean.yesdegr.yestreat - u78.mean.yesdegr.notreat
u78.yesdegr.treateffect
library(Matching)
library(arm)
library(dismo)
library(randomForest)
data(lalonde)
subgroup.nodegr <- subset(lalonde, nodegr == 1)
subgroup.yesdegr <- subset(lalonde, nodegr == 0)
library(Matching)
library(arm)
library(dismo)
library(randomForest)
data(lalonde)
subgroup.nodegr <- subset(lalonde, nodegr == 1)
subgroup.yesdegr <- subset(lalonde, nodegr == 0)
rf <- randomForest(re78 ~ age + educ + black + hisp + married + re74 + re75 + u74 + u75 + treat, data=lalonde, ntree=2000, importance=T)
varImpPlot(rf)
rf.nodegr <- randomForest(re78 ~ age + educ + black + hisp + married + re74 + re75 + u74 + u75 + treat, ntree=2000, importance=T)
rf.nodegr <- randomForest(re78 ~ age + educ + black + hisp + married + re74 + re75 + u74 + u75 + treat, data=subgroup.nodegr, ntree=2000, importance=T)
varImpPlot(rf.nodegr)
rf.yesdegr <- randomForest(re78 ~ age + educ + black + hisp + married + re74 + re75 + u74 + u75 + treat, data=subgroup.yesdegr, ntree=2000, importance=T)
varImpPlot(rf.yesdegr)
abline(v = 5, lwd = 2, col = "red")
city.names <- c("A", "B", "C", "D", "E", "F", "G", "H")
observed.turnout = c(18, 30, 14, 52, 24, 29, 48, 49)
observed.diffmeans <- mean(observed.turnout[c(2,4,6,8)]) -
mean(observed.turnout[c(1,3,5,7)])
print(observed.diffmeans)
foo <- as.data.frame(city.names, observed.turnout)
assignment <- function() {
# Four coin flips, establishing random assignment
assig        <- foo[sample(1:2),]
assig[3:4,]  <- foo[sample(3:4),]
assig[5:6,]  <- foo[sample(5:6),]
assig[7:8,]  <- foo[sample(7:8),]
treatment.group   <- assig[c(1,3,5,7),]
control.group     <- assig[c(2,4,6,8),]
return(mean(treatment.group[,2]) - mean(control.group[,2]))
}
iter.RI <- function(iterations = 100000) {
for (i in 1:iterations)
{storage.vector[i] <- assignment()
return(storage.vector)
}
}
storage.vector <- NULL
results <- iter.RI()
quantile(results, prob = c(0.95, 0.975))
length(unique(results))
hist(results)
plot(density(results))
abline(v = 5, lwd = 2, col = "red")
city.names <- c("A", "B", "C", "D", "E", "F", "G", "H")
observed.turnout = c(18, 30, 14, 52, 24, 29, 48, 49)
observed.diffmeans <- mean(observed.turnout[c(2,4,6,8)]) -
mean(observed.turnout[c(1,3,5,7)])
city.names <- c("A", "B", "C", "D", "E", "F", "G", "H")
observed.turnout = c(18, 30, 14, 52, 24, 29, 48, 49)
observed.diffmeans <- mean(observed.turnout[c(2,4,6,8)]) -
mean(observed.turnout[c(1,3,5,7)])
print(observed.diffmeans)
foo <- as.data.frame(city.names, observed.turnout)
assignment <- function() {
# Four coin flips, establishing random assignment
assig        <- foo[sample(1:2),]
assig[3:4,]  <- foo[sample(3:4),]
assig[5:6,]  <- foo[sample(5:6),]
assig[7:8,]  <- foo[sample(7:8),]
treatment.group   <- assig[c(1,3,5,7),]
control.group     <- assig[c(2,4,6,8),]
return(mean(treatment.group[,2]) - mean(control.group[,2]))
}
iter.RI <- function(iterations = 100000) {
for (i in 1:iterations)
{storage.vector[i] <- assignment()
return(storage.vector)
}
}
storage.vector <- NULL
results <- iter.RI()
quantile(results, prob = c(0.95, 0.975))
length(unique(results))
hist(results)
print(observed.diffmeans)
foo <- as.data.frame(city.names, observed.turnout)
assignment <- function() {
# Four coin flips, establishing random assignment
assig        <- foo[sample(1:2),]
assig[3:4,]  <- foo[sample(3:4),]
assig[5:6,]  <- foo[sample(5:6),]
assig[7:8,]  <- foo[sample(7:8),]
treatment.group   <- assig[c(1,3,5,7),]
control.group     <- assig[c(2,4,6,8),]
return(mean(treatment.group[,2]) - mean(control.group[,2]))
}
iter.RI <- function(iterations = 100000) {
for (i in 1:iterations)
{storage.vector[i] <- assignment()
return(storage.vector)
}
}
storage.vector <- NULL
results <- iter.RI()
quantile(results, prob = c(0.95, 0.975))
length(unique(results))
hist(results)
plot(density(results))
abline(v = 5, lwd = 2, col = "red")
city.names <- c("A", "B", "C", "D", "E", "F", "G", "H")
observed.turnout = c(18, 30, 14, 52, 24, 29, 48, 49)
observed.diffmeans <- mean(observed.turnout[c(2,4,6,8)]) -
mean(observed.turnout[c(1,3,5,7)])
print(observed.diffmeans)
foo <- data.frame(city.names, observed.turnout)
assignment <- function() {
# Four coin flips, establishing random assignment
assig        <- foo[sample(1:2),]
assig[3:4,]  <- foo[sample(3:4),]
assig[5:6,]  <- foo[sample(5:6),]
assig[7:8,]  <- foo[sample(7:8),]
treatment.group   <- assig[c(1,3,5,7),]
control.group     <- assig[c(2,4,6,8),]
return(mean(treatment.group[,2]) - mean(control.group[,2]))
}
iter.RI <- function(iterations = 100000) {
for (i in 1:iterations)
{storage.vector[i] <- assignment()
}
return(storage.vector)
}
storage.vector <- NULL
results <- iter.RI()
quantile(results, prob = c(0.95, 0.975))
length(unique(results))
hist(results)
plot(density(results))
abline(v = 5, lwd = 2, col = "red")
city.names <- c("A", "B", "C", "D", "E", "F", "G", "H", "I", "J")
observed.turnout = c(18, 30, 14, 52, 24, 29, 48, 49, 17, 30)
observed.diffmeans <- mean(observed.turnout[c(2,4,6,8,10)]) -
mean(observed.turnout[c(1,3,5,7,9)])
print(observed.diffmeans)
foo <- data.frame(city.names, observed.turnout)
assignment <- function() {
# Four coin flips, establishing random assignment
assig        <- foo[sample(1:2),]
assig[3:4,]  <- foo[sample(3:4),]
assig[5:6,]  <- foo[sample(5:6),]
assig[7:8,]  <- foo[sample(7:8),]
assig[9:10,]  <- foo[sample(9:10),]
treatment.group   <- assig[c(1,3,5,7,9),]
control.group     <- assig[c(2,4,6,8,10),]
return(mean(treatment.group[,2]) - mean(control.group[,2]))
}
iter.RI <- function(iterations = 100000) {
for (i in 1:iterations)
{storage.vector[i] <- assignment()
}
return(storage.vector)
}
storage.vector <- NULL
results <- iter.RI()
quantile(results, prob = c(0.025, 0.975))
length(unique(results))
hist(results)
plot(density(results))
abline(v = 5, lwd = 2, col = "red")
abline(v = quantile, lwd = 2, col = "red")
quantile(results, prob = c(0.025, 0.975))
hist(results)
plot(density(results))
abline(v = -13.8, lwd = 2, col = "red")
abline(v = 13.8, lwd = 2, col = "red")
?Mach
install.packages("Matching")
# Load the Matching library
library(Matching)
library(Matching)
?Mach
?Match
?Match
getwd()
library(load)
library("load")
load.Rdata("haha.RData")
library("load")
install.packages("load")
install.packages("Load")
install.packages("foreign")
library("foreign")
load.Rdata("haha.RData")
setwd("/Users/boyu/Documents/Minerva/Second\ Year/Sesond\ Semester/CS112/R\ Code")
getwd()
install.packages("quantreg")
library(quantreg)
??quantreg
qr()
quantreg
quantreg
library(Matching)
library(quantreg)
data(lalonde)
example(rq)
X = cbind(age, education, black, hispanic, married, nodegree, re75,
re74)
attach(lalonde)
X = cbind(age, education, black, hispanic, married, nodegree, re75,
re74)
attach(lalonde)
data(lalonde)
attach(lalonde)
X = cbind(age, education, black, hispanic, married, nodegree, re75,
re74)
X = cbind(age, educ, black, hispanic, married, nodegree, re75,
re74)
X = cbind(age, educ, black, hisp, married, nodegree, re75,
re74)
BalanceMat <- cbind(age, education, black, hispanic, married, nodegree,
re75, re74, I(re74*re75))
attach(lalonde)
X = cbind(age, educ, black, hisp, married, nodegree, re75,
re74)
X = cbind(age, educ, black, hisp, married, nodegr, re75,
re74)
BalanceMat <- cbind(age, educ, black, hisp, married, nodegr, re75,
re74, I(re74*re75))
genout <- GenMatch(Tr=treat, X=X, BalanceMatrix=BalanceMat,
estimand="ATE", M=1,
pop.size=16, max.generations=10, wait.generations=1)
rq(genout ~ re78,.5)
rq(re78 ~ genout,.5)
GenMatch function
GenMatch function
GenMatch function
rq(lalonde ~ re78,.5)
rq(lalonde ~ re78,.5)
detach(lalonde)
rq(lalonde ~ re78,.5)
attach(lalonde)
rq(re78 ~ treat,.5)
example(rq)
